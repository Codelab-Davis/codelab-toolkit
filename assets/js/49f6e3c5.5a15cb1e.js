"use strict";(self.webpackChunktmp=self.webpackChunktmp||[]).push([[470],{2640:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});var a=s(1527),o=s(7463);s(6533);const i={title:"async/await",description:"Simplifying Promise Consumption"},r="async/await: Simplifying Promise Consumption",t={id:"guide/async",title:"async/await",description:"Simplifying Promise Consumption",source:"@site/docs/guide/async.mdx",sourceDirName:"guide",slug:"/guide/async",permalink:"/docs/guide/async",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"async/await",description:"Simplifying Promise Consumption"},sidebar:"guideSidebar",previous:{title:"Introduction",permalink:"/docs/guide/"},next:{title:"useState Hook",permalink:"/docs/guide/useState"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"<code>async</code> Functions",id:"async-functions",level:2},{value:"<code>await</code>",id:"await",level:2},{value:"Common Uses",id:"common-uses",level:2},{value:"Fetching Data from an API",id:"fetching-data-from-an-api",level:3},{value:"Retrieving Data from a Database",id:"retrieving-data-from-a-database",level:3},{value:"Promises",id:"promises",level:2},{value:"Callbacks",id:"callbacks",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"asyncawait-simplifying-promise-consumption",children:[(0,a.jsx)(n.code,{children:"async"}),"/",(0,a.jsx)(n.code,{children:"await"}),": Simplifying Promise Consumption"]}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"async/await"})," is a feature of JavaScript that allows developers to work with promises in simple and synchronous-like fashion. It was introduced back in 2017 and replaced older methods of consuming promises such as chaining ",(0,a.jsx)(n.code,{children:"then()"})," and ",(0,a.jsx)(n.code,{children:"catch()"})," as well as using callbacks, which we will cover as well."]}),"\n",(0,a.jsxs)(n.h2,{id:"async-functions",children:[(0,a.jsx)(n.code,{children:"async"})," Functions"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Declaring a function as ",(0,a.jsx)(n.code,{children:"async"})," forces the function to return a promise"]}),"\n",(0,a.jsx)(n.li,{children:"Values that are not promises are returned as resolved promises"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"const foo = async () => 1;\n\nfoo().then((value) => console.log(value)); // 1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"await",children:(0,a.jsx)(n.code,{children:"await"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"await"})," keyword makes JavaScript wait for a promise to be settled"]}),"\n",(0,a.jsx)(n.li,{children:"This allows for the code to appear more \u201csynchronous\u201d"}),"\n",(0,a.jsxs)(n.li,{children:["Note that the ",(0,a.jsx)(n.code,{children:"await"})," keyword can only appear inside the body of an ",(0,a.jsx)(n.code,{children:"async"})," function, however, it can also be used at the top-level of a module"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const res = axios.get("https://www.example.com");\n\nexport default await res;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"common-uses",children:"Common Uses"}),"\n",(0,a.jsx)(n.h3,{id:"fetching-data-from-an-api",children:"Fetching Data from an API"}),"\n",(0,a.jsxs)(n.p,{children:["One of the most common ways ",(0,a.jsx)(n.code,{children:"async/await"})," is utilized is when fetching data from some form of API."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// Function that makes a GET request to an example API\nconst fetchData = async () => {\n    try {\n        // Response is "awaited" and logged to the console once fulfilled\n        const response = await axios.get("https://www.example.com");\n        console.log(response.data);\n    } catch (err) {\n        // Should the request be rejected the associated error object will be logged\n        console.log(err);\n    }\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"retrieving-data-from-a-database",children:"Retrieving Data from a Database"}),"\n",(0,a.jsxs)(n.p,{children:["Another way ",(0,a.jsx)(n.code,{children:"async/await"})," can come up is when a developer is trying to query data from a database in the backend"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// Example user router\nrouter.route("/:id").get(async (req, res) => {\n    try {\n        // Query to the DB is made and result is sent to client once fulfilled\n        const users = await User.findById(req.params.id);\n        res.send(users);\n    } catch (err) {\n        // Error object is logged and send client-side if request is rejected\n        console.log(err);\n        res.status(400).send(err);\n    }\n});\n\n// NOTE: Mongoose queries are NOT promises, however they are thenable\n// objects that permit the use of async/await\n'})}),"\n",(0,a.jsx)(n.h2,{id:"promises",children:"Promises"}),"\n",(0,a.jsx)(n.p,{children:"Promises provide a method for handling asynchronous operations in JavaScript. A typical example of this would be fetching data from an API or querying a database."}),"\n",(0,a.jsx)(n.p,{children:"Promises can be in one of three states:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Pending: The promise is in its initial state and is working on resolving a particular value"}),"\n",(0,a.jsx)(n.li,{children:"Fulfilled: The promise has settled and the resulting value can be successfully consumed"}),"\n",(0,a.jsx)(n.li,{children:"Rejected: The promise has failed with an err"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Using the ",(0,a.jsx)(n.code,{children:"then()"})," , the user can access the resolved data using a callback function. On the other hand, if the promise was rejected, the user can access the associated error object using the ",(0,a.jsx)(n.code,{children:"catch()"})," method."]}),"\n",(0,a.jsx)(n.p,{children:"A simple example of promise consumption is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// Creates random integer between 1-10\nconst randomInt = Math.floor(Math.random() * 10) + 1;\n\nconst promise = new Promise((resolve, reject) => {\n    if (randomInt >= 5) {\n        resolve("Number is greater or equal to 5");\n    } else {\n        reject(new Error("Number is less than 5"));\n    }\n});\n\npromise\n    .then((res) => {\n        console.log(res); // "Number is greater or equal to 5"\n    })\n    .catch((err) => {\n        console.log(err.toString()); // "Error: Number is less than 5"\n    });\n'})}),"\n",(0,a.jsx)(n.h2,{id:"callbacks",children:"Callbacks"}),"\n",(0,a.jsx)(n.p,{children:"Callbacks provide a way for users to invoke a separate function that is passed in as an argument to the currently called function."}),"\n",(0,a.jsx)(n.p,{children:"A simple example of how callbacks function is shown as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const callback = () => {\n    console.log("Callback invoked!");\n};\n\nconst log = (message, callback) => {\n    console.log(message);\n    callback();\n};\n\nlog("Hello World!", callback);\n/*\n * > Hello World!\n * > Callback invoked!\n */\n'})}),"\n",(0,a.jsx)(n.p,{children:"Callbacks is an incredibly powerful feature of JavaScript that is used in a variety of applications both front and back-end. They allow for a modular and well-structured manner to invoke functions."})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},6533:(e,n,s)=>{s.d(n,{Z:()=>o});s(959);var a=s(1527);const o=e=>{let{src:n}=e;return(0,a.jsx)("div",{className:"flex h-[500px] rounded border",children:(0,a.jsx)("iframe",{src:n,className:"h-full w-full",frameborder:"0"})})}},7463:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>r});var a=s(959);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);