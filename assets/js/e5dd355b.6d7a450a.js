"use strict";(self.webpackChunktmp=self.webpackChunktmp||[]).push([[5182],{3617:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=t(1527),s=t(7463),c=t(6533);const a={title:"Custom Hooks",description:"Learn how to create custom hooks in React"},i="Custom Hooks",r={id:"guide/customHooks",title:"Custom Hooks",description:"Learn how to create custom hooks in React",source:"@site/docs/guide/customHooks.mdx",sourceDirName:"guide",slug:"/guide/customHooks",permalink:"/docs/guide/customHooks",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Custom Hooks",description:"Learn how to create custom hooks in React"},sidebar:"guideSidebar",previous:{title:"Default Theming with Tailwind",permalink:"/docs/guide/tailwind"},next:{title:"useMemo and useCallback Hooks",permalink:"/docs/guide/useMemoUseCallback"}},u={},d=[{value:"Introduction",id:"introduction",level:2},{value:"How to use a Custom Hook?",id:"how-to-use-a-custom-hook",level:2},{value:"Example: <code>useCounter</code> Hook",id:"example-usecounter-hook",level:3},{value:"When to use a Custom Hook?",id:"when-to-use-a-custom-hook",level:2},{value:"Example: <code>useTheme</code>",id:"example-usetheme",level:2},{value:"Important Parts",id:"important-parts",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"custom-hooks",children:"Custom Hooks"}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["While React comes with many hooks out of the box, such as ",(0,o.jsx)(n.code,{children:"useState"})," and ",(0,o.jsx)(n.code,{children:"useEffect"}),", sometimes it could be useful to have a hook that is more specifically suited for what you are building. That\u2019s where defining your own hooks can come in handy."]}),"\n",(0,o.jsxs)(n.p,{children:["Custom hooks in React are a great way to share ",(0,o.jsx)(n.strong,{children:"logic"})," between components, and by doing so, it reduces code duplication and improves the separation of concerns."]}),"\n",(0,o.jsx)(n.h2,{id:"how-to-use-a-custom-hook",children:"How to use a Custom Hook?"}),"\n",(0,o.jsxs)(n.p,{children:["A custom hook is can be defined by creating a JavaScript function beginning with ",(0,o.jsx)(n.code,{children:"use"}),". So, for example, if we wanted to define a hook for a counter, we could name it ",(0,o.jsx)(n.code,{children:"useCounter"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function useCounter() {\n\t...\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s expand on this example. Let\u2019s say we want a counter app, with a count value and a way to increment and decrement values. This is how we would do that without a custom hook:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function App() {\n    const [count, setCount] = useState(0);\n\n    const handleIncrement = () => {\n        setCount(count + 1);\n    };\n\n    const handleDecrement = () => {\n        setCount(count - 1);\n    };\n\n    return (\n        <>\n            <div>\n                <h1>Count: {count}</h1>\n                <button onClick={handleIncrement}>Increment</button>\n                <button onClick={handleDecrement}>Decrement</button>\n            </div>\n        </>\n    );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"But what happens when we want two counters?"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function App() {\n    const [count1, setCount1] = useState(0);\n    const [count2, setCount2] = useState(0);\n\n    const handleIncrement1 = () => {\n        setCount1(count1 + 1);\n    };\n\n    const handleDecrement1 = () => {\n        setCount1(count1 - 1);\n    };\n\n    const handleIncrement2 = () => {\n        setCount2(count2 + 1);\n    };\n\n    const handleDecrement2 = () => {\n        setCount2(count2 - 1);\n    };\n\n    return (\n        <>\n            <div>\n                <h1>Count 1: {count1}</h1>\n                <button onClick={handleIncrement1}>Increment</button>\n                <button onClick={handleDecrement1}>Decrement</button>\n            </div>\n            <div>\n                <h1>Count 2: {count2}</h1>\n                <button onClick={handleIncrement2}>Increment</button>\n                <button onClick={handleDecrement2}>Decrement</button>\n            </div>\n        </>\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Suddenly, the app is much bigger, and more bloated. There\u2019s a lot of duplicated code here, but since we need to handle two different ",(0,o.jsx)(n.code,{children:"useState"})," values here, there\u2019s not much we could do."]}),"\n",(0,o.jsx)(n.p,{children:"The solution? Define a custom hook for a counter:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function useCounter(initialValue: number = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  function handleIncrement() {\n    setCount(count + 1);\n  }\n\n  function handleDecrement() {\n    setCount(count - 1);\n  }\n\n  return {\n    count,\n    handleIncrement,\n    handleDecrement,\n  };\n}\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Hooks Automatically Share Logic, Not Values"})}),(0,o.jsxs)(n.p,{children:["Notice that we needed to return the ",(0,o.jsx)(n.code,{children:"count"}),", ",(0,o.jsx)(n.code,{children:"handleIncrement"}),", and ",(0,o.jsx)(n.code,{children:"handleDecrement"})," values within the hook itself. You must manually return any values that your hook should return."]})]}),"\n",(0,o.jsx)(n.p,{children:"Now, our single counter example looks like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function App() {\n    const { count, handleIncrement, handleDecrement } = useCounter(0);\n\n    return (\n        <>\n            <div>\n                <h1>Count: {count}</h1>\n                <button onClick={handleIncrement}>Increment</button>\n                <button onClick={handleDecrement}>Decrement</button>\n            </div>\n        </>\n    );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"\u2026and our double counter example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function App() {\n    const {\n        count: count1,\n        handleIncrement: handleIncrement1,\n        handleDecrement: handleDecrement1,\n    } = useCounter(0);\n    const {\n        count: count2,\n        handleIncrement: handleIncrement2,\n        handleDecrement: handleDecrement2,\n    } = useCounter(0);\n\n    return (\n        <>\n            <div>\n                <h1>Counter 1: {count1}</h1>\n                <button onClick={handleIncrement1}>Increment</button>\n                <button onClick={handleDecrement1}>Decrement</button>\n            </div>\n            <div>\n                <h1>Counter 2: {count2}</h1>\n                <button onClick={handleIncrement2}>Increment</button>\n                <button onClick={handleDecrement2}>Decrement</button>\n            </div>\n        </>\n    );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"A lot of the duplicated code has been removed and the custom hook provides abstraction for the functionality of the counter! \ud83d\ude00"}),"\n",(0,o.jsxs)(n.h3,{id:"example-usecounter-hook",children:["Example: ",(0,o.jsx)(n.code,{children:"useCounter"})," Hook"]}),"\n",(0,o.jsx)(c.Z,{src:"https://codelab-davis.github.io/codelab-toolkit-sandboxes/#/custom-hooks/counter"}),"\n",(0,o.jsx)(n.h2,{id:"when-to-use-a-custom-hook",children:"When to use a Custom Hook?"}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s important to note that hooks aren\u2019t necessarily the solution to all duplicated pieces of code. If we wanted to define a way to get a sorted array\u2026"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// \u274c This doesn't need to be a hook\nfunction useSorted(array) {\n\t...\n}\n\n// \u2705 Use a regular function instead!\nfunction getSorted(array) {\n\t...\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"\u2026 since this doesn\u2019t have to use any stateful logic in the app, there is no reason to make it a hook. This makes it so that you can use this function anywhere, not just on the top-level of your component."}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s also good to keep custom hooks for easily definable, high-level use-cases. If you cannot easily name your custom hook, its logic might be too entangled with the rest of your app to consider a custom hook as an option."}),"\n",(0,o.jsxs)(n.h2,{id:"example-usetheme",children:["Example: ",(0,o.jsx)(n.code,{children:"useTheme"})]}),"\n",(0,o.jsx)(c.Z,{src:"https://codelab-davis.github.io/codelab-toolkit-sandboxes/#/custom-hooks/theme"}),"\n",(0,o.jsx)(n.h3,{id:"important-parts",children:"Important Parts"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"src/hooks/useTheme.tsx"})," defines a hook that returns the theme\u2019s current state, as well as a function to toggle the Tailwind Theme"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["It toggles the theme via an HTML class, refer to the ",(0,o.jsx)(n.a,{href:"https://tailwindcss.com/docs/dark-mode",children:"official Tailwind documentation"})," for more information"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"src/App.tsx"})," uses the ",(0,o.jsx)(n.code,{children:"useTheme"})," hook, it changes the text based on the state, as well as a button that toggles the theme using the function."]}),"\n",(0,o.jsxs)(n.p,{children:["To understand how the text is being conditionally rendered, consider reading ",(0,o.jsx)(n.a,{href:"conditional",children:"Conditional Rendering"})]}),"\n",(0,o.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsxs)(n.p,{children:["If you would like to learn more about custom hooks in React, please refer to the ",(0,o.jsx)(n.a,{href:"https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-help-you-migrate-to-better-patterns",children:"official React documentation"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},6533:(e,n,t)=>{t.d(n,{Z:()=>s});t(959);var o=t(1527);const s=e=>{let{src:n}=e;return(0,o.jsx)("div",{className:"flex h-[500px] rounded border",children:(0,o.jsx)("iframe",{src:n,className:"h-full w-full",frameborder:"0"})})}},7463:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var o=t(959);const s={},c=o.createContext(s);function a(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);