"use strict";(self.webpackChunktmp=self.webpackChunktmp||[]).push([[184],{8461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var o=n(1527),i=n(7463),a=n(6533);const s={title:"Authentication with NextAuth",description:"Simple and Secure Authentication for your Next App"},r="Authentication with NextAuth",l={id:"guide/authentication",title:"Authentication with NextAuth",description:"Simple and Secure Authentication for your Next App",source:"@site/docs/guide/authentication.mdx",sourceDirName:"guide",slug:"/guide/authentication",permalink:"/codelab-toolkit/docs/guide/authentication",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Authentication with NextAuth",description:"Simple and Secure Authentication for your Next App"},sidebar:"guideSidebar",previous:{title:"useMemo and useCallback Hooks",permalink:"/codelab-toolkit/docs/guide/useMemoUseCallback"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Integration",id:"integration",level:2},{value:"Completed Example",id:"completed-example",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"authentication-with-nextauth",children:"Authentication with NextAuth"}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(t.p,{children:"Authentication plays a crucial role in maintaining the security and usability of your web application. Coming in a variety of different forms, providers, and standards, a secure and robust authentication system can be fairly daunting and cumbersome to implement especially for beginner developers. Luckily, there are quite a few simple and easily-understandable solutions out there that can quickly get the ball rolling on securing your application. During this lesson, we will be demonstrating the features of NextAuth, an open-source authentication solution for Next.js, by implementing Google Auth into an example Next.js application."}),"\n",(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.p,{children:["Install NextAuth using ",(0,o.jsx)(t.code,{children:"npm"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npm install next-auth\n"})}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(t.p,{children:["Create a file named ",(0,o.jsx)(t.code,{children:"[...nextauth].js"}),"\xa0in\xa0",(0,o.jsx)(t.code,{children:"pages/api/auth"}),". This file will describe the configuration of NextAuth. For example, what providers would you like to have, any custom pages for sign in or sign out, any callbacks you\u2019d like to define, etc."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import NextAuth from "next-auth";\nimport GoogleProvider from "next-auth/providers/google";\n\nexport const authOptions = {\n    providers: [\n        GoogleProvider({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        }),\n    ],\n};\n\nexport default NextAuth(authOptions);\n'})}),"\n",(0,o.jsx)(t.p,{children:"Providers dictate how the user can sign in to your application. For example, if you\u2019d like the user to sign in with their Google account, you would use the Google provider. On the other hand, if you\u2019d like the user to sign in with an username and password that is stored in your user database, the credentials provider should be used."}),"\n",(0,o.jsxs)(t.p,{children:["Note that in our case, since we are utilizing the Google provider, we\u2019ll also need to create a Google web client so that we can utilize Google\u2019s credential API. This can be done by going to the ",(0,o.jsx)(t.a,{href:"https://console.cloud.google.com/getting-started",children:"Google Cloud console"}),", creating a project, and setting up a OAuth 2.0 client ID. This is where you can get the client ID and client secret variables seen above."]}),"\n",(0,o.jsx)(t.h2,{id:"integration",children:"Integration"}),"\n",(0,o.jsx)(t.p,{children:"We will now integrate NextAuth into the application itself. First, we need to declare the session provider near the root of the component tree so that we can get the user\u2019s information in our pages. We can simply do so by placing the provider at the top level of our application."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { SessionProvider } from "next-auth/react";\n\nexport default function App({\n    Component,\n    pageProps: { session, ...pageProps },\n}) {\n    return (\n        <SessionProvider session={session}>\n            <Component {...pageProps} />\n        </SessionProvider>\n    );\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"If you are unclear of the mechanism of React that allows for the consumption of data between levels of the component hierarchy called Context, please refer to either the"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"./useContext",children:"useContext Hook: Another Way to Share Data"})}),"\n",(0,o.jsxs)(t.p,{children:["page or the official React documentation on the topic ",(0,o.jsx)(t.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"here"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Now, in any particular page or component further down in the component tree can consume this information using the ",(0,o.jsx)(t.code,{children:"useSession()"})," hook. For example, a login/logout button component needs to display the appropriate text based on whether there is a currently logged in user or not."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { useSession, signIn, signOut } from "next-auth/react";\n\nexport default function LoginButton() {\n    const { data: session } = useSession();\n\n    return (\n        <button\n            onClick={() => {\n                if (session) {\n                    signOut();\n                } else {\n                    signIn();\n                }\n            }}\n        >\n            {session ? "Sign Out" : "Sign In"}\n        </button>\n    );\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"completed-example",children:"Completed Example"}),"\n",(0,o.jsx)(a.Z,{src:"https://codesandbox.io/embed/next-auth-k33q9m?file=/app/page.tsx:9,84&embed=1"}),"\n",(0,o.jsx)(t.p,{children:"That\u2019s it! Note that we have compiled a fairly bare bones example here since in real applications of NextAuth, there are most likely a plethora of other settings you would want to change and features you\u2019d like to include. Some of these may include, fetching session info server-side, utilizing a route protection middleware, etc."}),"\n",(0,o.jsx)(t.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://next-auth.js.org/getting-started/introduction",children:"NextAuth Official Documentation"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},6533:(e,t,n)=>{n.d(t,{Z:()=>i});n(959);var o=n(1527);const i=e=>{let{src:t}=e;return(0,o.jsx)("div",{className:"flex h-[500px] rounded border",children:(0,o.jsx)("iframe",{src:t,className:"h-full w-full",frameborder:"0"})})}},7463:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var o=n(959);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);